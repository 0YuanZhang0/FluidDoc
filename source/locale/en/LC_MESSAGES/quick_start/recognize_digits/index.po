# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, paddle-dev@baidu.com
# This file is distributed under the same license as the PaddlePaddle Fluid
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddlePaddle Fluid 0.13.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-15 16:34+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/quick_start/recognize_digits/index.md:1
msgid "识别数字"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:3
msgid "本教程源代码目录在book/recognize_digits， 初次使用请参考PaddlePaddle安装教程，更多内容请参考本教程的视频课堂。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:5
msgid "背景介绍"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:6
msgid ""
"当我们学习编程的时候，编写的第一个程序一般是实现打印\"Hello World\"。而机器学习（或深度学习）的入门教程，一般都是 MNIST "
"数据库上的手写识别问题。原因是手写识别属于典型的图像分类问题，比较简单，同时MNIST数据集也很完备。MNIST数据集作为一个简单的计算机视觉数据集，包含一系列如图1所示的手写数字图片和对应的标签。图片是28x28的像素矩阵，标签则对应着0~9的10个数字。每张图片都经过了大小归一化和居中处理。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:9
#: ../../source/quick_start/recognize_digits/index.md:49
#: ../../source/quick_start/recognize_digits/index.md:65
#: ../../source/quick_start/recognize_digits/index.md:74
#: ../../source/quick_start/recognize_digits/index.md:83
#: ../../source/quick_start/recognize_digits/index.md:100
msgid "alt"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:15
msgid ""
"MNIST数据集是从 NIST 的Special Database 3（SD-3）和Special Database "
"1（SD-1）构建而来。由于SD-3是由美国人口调查局的员工进行标注，SD-1是由美国高中生进行标注，因此SD-3比SD-1更干净也更容易识别。Yann"
" "
"LeCun等人从SD-1和SD-3中各取一半作为MNIST的训练集（60000条数据）和测试集（10000条数据），其中训练集来自250位不同的标注员，此外还保证了训练集和测试集的标注员是不完全相同的。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:17
msgid ""
"Yann LeCun早先在手写字符识别上做了很多研究，并在研究过程中提出了卷积神经网络（Convolutional Neural "
"Network），大幅度地提高了手写字符的识别能力，也因此成为了深度学习领域的奠基人之一。如今的深度学习领域，卷积神经网络占据了至关重要的地位，从最早Yann"
" LeCun提出的简单LeNet，到如今ImageNet大赛上的优胜模型VGGNet、GoogLeNet、ResNet等（请参见图像分类 "
"教程），人们在图像分类领域，利用卷积神经网络得到了一系列惊人的结果。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:19
msgid ""
"有很多算法在MNIST上进行实验。1998年，LeCun分别用单层线性分类器、多层感知器（Multilayer Perceptron, "
"MLP）和多层卷积神经网络LeNet进行实验，使得测试集上的误差不断下降（从12%下降到0.7%）[1]。此后，科学家们又基于K近邻（K-Nearest"
" "
"Neighbors）算法[2]、支持向量机（SVM）[3]、神经网络[4-7]和Boosting方法[8]等做了大量实验，并采用多种预处理方法（如去除歪曲、去噪、模糊等）来提高识别的准确率。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:21
msgid "本教程中，我们从简单的模型Softmax回归开始，带大家入门手写字符识别，并逐步进行模型优化。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:24
msgid "模型概览"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:26
msgid "基于MNIST数据训练一个分类器，在介绍本教程使用的三个基本图像分类网络前，我们先给出一些定义："
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:31
msgid "Softmax回归(Softmax Regression)"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:33
msgid "最简单的Softmax回归模型是先将输入层经过一个全连接层得到的特征，然后直接通过softmax 函数进行多分类[9]。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:35
msgid "输入层的数据$X$传到输出层，在激活操作之前，会乘以相应的权重 $W$ ，并加上偏置变量 $b$ ，具体如下："
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:37
msgid "$$ y_i = \\text{softmax}(\\sum_j W_{i,j}x_j + b_i) $$"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:39
msgid "其中 $ \\text{softmax}(x_i) = \\frac{e^{x_i}}{\\sum_j e^{x_j}} $"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:41
msgid ""
"对于有 $N$ 个类别的多分类问题，指定 $N$ 个输出节点，$N$ 维结果向量经过softmax将归一化为 $N$ "
"个[0,1]范围内的实数值，分别表示该样本属于这 $N$ 个类别的概率。此处的 $y_i$ 即对应该图片为数字 $i$ 的预测概率。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:43
msgid "在分类问题中，我们一般采用交叉熵代价损失函数（cross entropy），公式如下："
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:45
msgid "$$  \\text{crossentropy}(label, y) = -\\sum_i label_ilog(y_i) $$"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:47
msgid "图2为softmax回归的网络图，图中权重用蓝线表示、偏置用红线表示、+1代表偏置参数的系数为1。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:54
msgid "多层感知器(Multilayer Perceptron, MLP)"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:56
msgid "Softmax回归模型采用了最简单的两层神经网络，即只有输入层和输出层，因此其拟合能力有限。为了达到更好的识别效果，我们考虑在输入层和输出层中间加上若干个隐藏层[10]。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:63
msgid "图3为多层感知器的网络结构图，图中权重用蓝线表示、偏置用红线表示、+1代表偏置参数的系数为1。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:70
msgid "卷积神经网络(Convolutional Neural Network, CNN)"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:72
msgid "在多层感知器模型中，将图像展开成一维向量输入到网络中，忽略了图像的位置和结构信息，而卷积神经网络能够更好的利用图像的结构信息。LeNet-5是一个较简单的卷积神经网络。图4显示了其结构：输入的二维图像，先经过两次卷积层到池化层，再经过全连接层，最后使用softmax分类作为输出层。下面我们主要介绍卷积层和池化层。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:79
msgid "卷积层"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:81
msgid "卷积层是卷积神经网络的核心基石。在图像识别里我们提到的卷积是二维卷积，即离散二维滤波器（也称作卷积核）与二维图像做卷积操作，简单的讲是二维滤波器滑动到二维图像上所有位置，并在每个位置上与该像素点及其领域像素点做内积。卷积操作被广泛应用与图像处理领域，不同卷积核可以提取不同的特征，例如边沿、线性、角等特征。在深层卷积神经网络中，通过卷积操作可以提取出图像低级到复杂的特征。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:88
msgid ""
"图5给出一个卷积计算过程的示例图，输入图像大小为$H=5,W=5,D=3$，即$5 \\times "
"5$大小的3通道（RGB，也称作深度）彩色图像。这个示例图中包含两（用$K$表示）组卷积核，即图中滤波器$W_0$和$W_1$。在卷积计算中，通常对不同的输入通道采用不同的卷积核，如图示例中每组卷积核包含（$D=3）$个$3"
" \\times 3$（用$F \\times "
"F$表示）大小的卷积核。另外，这个示例中卷积核在图像的水平方向（$W$方向）和垂直方向（$H$方向）的滑动步长为2（用$S$表示）；对输入图像周围各填充1（用$P$表示）个0，即图中输入层原始数据为蓝色部分，灰色部分是进行了大小为1的扩展，用0来进行扩展。经过卷积操作得到输出为$3"
" \\times 3 \\times 2$（用$H_{o} \\times W_{o} \\times K$表示）大小的特征图，即$3 "
"\\times 3$大小的2通道特征图，其中$H_o$计算公式为：$H_o = (H - F + 2 \\times P)/S + "
"1$，$W_o$同理。 "
"而输出特征图中的每个像素，是每组滤波器与输入图像每个特征图的内积再求和，再加上偏置$b_o$，偏置通常对于每个输出特征图是共享的。输出特征图$o[:,:,0]$中的最后一个$-2$计算如图5右下角公式所示。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:90
msgid ""
"在卷积操作中卷积核是可学习的参数，经过上面示例介绍，每层卷积的参数大小为$D \\times F \\times F \\times "
"K$。在多层感知器模型中，神经元通常是全部连接，参数较多。而卷积层的参数较少，这也是由卷积层的主要特性即局部连接和共享权重所决定。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:96
msgid ""
"通过介绍卷积计算过程及其特性，可以看出卷积是线性操作，并具有平移不变性（shift-"
"invariant），平移不变性即在图像每个位置执行相同的操作。卷积层的局部连接和权重共享使得需要学习的参数大大减小，这样也有利于训练较大卷积神经网络。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:98
msgid "池化层"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:105
msgid "池化是非线性下采样的一种形式，主要作用是通过减少网络的参数来减小计算量，并且能够在一定程度上控制过拟合。通常在卷积层的后面会加上一个池化层。池化包括最大池化、平均池化等。其中最大池化是用不重叠的矩形框将输入层分成不同的区域，对于每个矩形框的数取最大值作为输出层，如图6所示。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:107
msgid "更详细的关于卷积神经网络的具体知识可以参考斯坦福大学公开课和图像分类教程。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:109
msgid "常见激活函数介绍"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:118
msgid "更详细的介绍请参考维基百科激活函数。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:120
msgid "数据介绍"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:122
msgid "PaddlePaddle在API中提供了自动加载MNIST数据的模块paddle.dataset.mnist。加载后的数据位于/home/username/.cache/paddle/dataset/mnist下："
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:125
msgid ""
"|    文件名称          |       说明              | "
"|----------------------|-------------------------| |train-images-"
"idx3-ubyte|  训练数据图片，60,000条数据 | |train-labels-idx1-ubyte|  "
"训练数据标签，60,000条数据 | |t10k-images-idx3-ubyte |  测试数据图片，10,000条数据 | |t10k-"
"labels-idx1-ubyte |  测试数据标签，10,000条数据 |"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:132
msgid "配置说明"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:134
msgid "首先，加载PaddlePaddle的V2 api包。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:139
msgid "其次，定义三个不同的分类器："
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:195
msgid "接着，通过layer.data调用来获取数据，然后调用分类器（这里我们提供了三个不同的分类器）得到分类结果。训练时，对该结果计算其损失函数，分类问题常常选择交叉熵损失函数。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:213
msgid "然后，指定训练相关的参数。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:231
msgid ""
"下一步，我们开始训练过程。paddle.dataset.movielens.train()和paddle.dataset.movielens.test()分别做训练和测试数据集。这两个函数各自返回一个reader——PaddlePaddle中的reader是一个Python函数，每次调用的时候返回一个Python"
" yield generator。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:233
msgid ""
"下面shuffle是一个reader decorator，它接受一个reader A，返回另一个reader B —— reader B "
"每次读入buffer_size条训练数据到一个buffer里，然后随机打乱其顺序，并且逐条输出。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:235
msgid ""
"batch是一个特殊的decorator，它的输入是一个reader，输出是一个batched reader —— "
"在PaddlePaddle里，一个reader每次yield一条训练数据，而一个batched reader每次yield一个minibatch。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:237
msgid "event_handler_plot可以用来在训练过程中画图如下："
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:239
msgid "png"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:268
msgid "event_handler 用来在训练过程中输出训练结果"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:300
msgid "训练过程是完全自动的，event_handler里打印的日志类似如下所示："
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:311
msgid ""
"训练之后，检查模型的预测准确度。用 MNIST 训练的时候，一般 softmax回归模型的分类准确率为约为 "
"92.34%，多层感知器为97.66%，卷积神经网络可以达到 99.20%。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:314
msgid "应用模型"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:316
msgid "可以使用训练好的模型对手写体数字图片进行分类，下面程序展示了如何使用paddle.infer接口进行推断。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:339
msgid "总结"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:341
msgid "本教程的softmax回归、多层感知器和卷积神经网络是最基础的深度学习模型，后续章节中复杂的神经网络都是从它们衍生出来的，因此这几个模型对之后的学习大有裨益。同时，我们也观察到从最简单的softmax回归变换到稍复杂的卷积神经网络的时候，MNIST数据集上的识别准确率有了大幅度的提升，原因是卷积层具有局部连接和共享权重的特性。在之后学习新模型的时候，希望大家也要深入到新模型相比原模型带来效果提升的关键之处。此外，本教程还介绍了PaddlePaddle模型搭建的基本流程，从dataprovider的编写、网络层的构建，到最后的训练和预测。对这个流程熟悉以后，大家就可以用自己的数据，定义自己的网络模型，并完成自己的训练和预测任务了。"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:343
msgid "参考文献"
msgstr ""

#: ../../source/quick_start/recognize_digits/index.md:356
msgid ""
"<br/> <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-"
"sa/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" "
"src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a><br "
"/><span xmlns:dct=\"http://purl.org/dc/terms/\" "
"href=\"http://purl.org/dc/dcmitype/Text\" property=\"dct:title\" "
"rel=\"dct:type\">本教程</span> 由 <a "
"xmlns:cc=\"http://creativecommons.org/ns#\" "
"href=\"http://book.paddlepaddle.org\" property=\"cc:attributionName\" "
"rel=\"cc:attributionURL\">PaddlePaddle</a> 创作，采用 <a rel=\"license\" "
"href=\"http://creativecommons.org/licenses/by-sa/4.0/\">知识共享 署名-相同方式共享 "
"4.0 国际 许可协议</a>进行许可。"
msgstr ""

