# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, paddle-dev@baidu.com
# This file is distributed under the same license as the PaddlePaddle Fluid
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PaddlePaddle Fluid 0.13.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-15 16:34+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/quick_start/install/build_from_source_cn.rst:2
msgid "从源码编译"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:7
msgid "需要的软硬件"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:9
msgid "为了编译PaddlePaddle，我们需要"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:11
msgid "一台电脑，可以装的是 Linux, Windows 或者 MacOS 操作系统"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:12
msgid "Docker"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:14
msgid "不需要依赖其他任何软件了。即便是 Python 和 GCC 都不需要，因为我们会把所有编译工具都安装进一个 Docker 镜像里。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:19
msgid "编译方法"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:21
msgid ""
"PaddlePaddle需要使用Docker环境完成编译，这样可以免去单独安装编译依赖的步骤，可选的不同编译环境Docker镜像 可以在 `这里 "
"<https://hub.docker.com/r/paddlepaddle/paddle_manylinux_devel/tags/>`__ "
"找到，您也可以 在 `这里 "
"<https://github.com/PaddlePaddle/Paddle/tree/develop/tools/manylinux1/>`__"
" 找到 paddle_manylinux_devel "
"镜像的编译以及使用方法。或者参考下述可选步骤，从源码中构建用于编译PaddlePaddle的Docker镜像。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:26
msgid "如果您选择不使用Docker镜像，则需要在本机安装下面章节列出的 :ref:`编译依赖 <_compile_deps>` 之后才能开始编译的步骤。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:28
msgid "编译PaddlePaddle，需要执行："
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:42
msgid "注：上述命令把当前目录（源码树根目录）映射为 container 里的 :code:`/paddle` 目录。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:44
msgid "编译完成后会在build/python/dist目录下生成输出的whl包，可以选在在当前机器安装也可以拷贝到目标机器安装："
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:50
msgid "如果机器中已经安装过PaddlePaddle，有两种方法："
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:64
msgid "执行单元测试"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:66
msgid "如果您期望在编译完成后立即执行所有的单元测试，可以按照下面的方法："
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:68
msgid ""
"设置 :code:`RUN_TEST=ON` 和 :code:`WITH_TESTING=ON` 就会在完成编译之后，立即执行单元测试。 开启 "
":code:`WITH_GPU=ON` 可以指定同时执行GPU上的单元测试。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:75
msgid "如果期望执行其中一个单元测试，（比如 :code:`test_sum_op` ）："
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:87
msgid "常见问题"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:89
msgid "什么是 Docker?"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:91
msgid "如果您没有听说 Docker，可以把它想象为一个类似 virtualenv 的系统，但是虚拟的不仅仅是 Python 的运行环境。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:93
msgid "Docker 还是虚拟机？"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:95
msgid ""
"有人用虚拟机来类比 Docker。需要强调的是：Docker 不会虚拟任何硬件，Docker container "
"里运行的编译工具实际上都是在本机的 CPU 和操作系统上直接运行的，性能和把编译工具安装在本机运行一样。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:97
msgid "为什么用 Docker?"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:99
msgid "把工具和配置都安装在一个 Docker image 里可以标准化编译环境。这样如果遇到问题，其他人可以复现问题以便帮助。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:101
msgid "另外，对于习惯使用Windows和MacOS的开发者来说，使用Docker就不用配置交叉编译环境了。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:103
msgid "我可以选择不用Docker吗？"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:105
msgid ""
"当然可以。大家可以用把开发工具安装进入 Docker image 一样的方式，把这些工具安装到本机。这篇文档介绍基于 Docker "
"的开发流程，是因为这个流程比其他方法都更简便。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:107
msgid "学习 Docker 有多难？"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:109
msgid ""
"理解 Docker 并不难，大概花十分钟看一下 `如何使用Docker "
"<https://zhuanlan.zhihu.com/p/19902938>`_ "
"。这可以帮您省掉花一小时安装和配置各种开发工具，以及切换机器时需要新安装的辛苦。别忘了 PaddlePaddle "
"更新可能导致需要新的开发工具。更别提简化问题复现带来的好处了。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:111
msgid "我可以用 IDE 吗？"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:113
msgid "当然可以，因为源码就在本机上。IDE 默认调用 make 之类的程序来编译源码，我们只需要配置 IDE 来调用 Docker 命令编译源码即可。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:115
msgid "很多 PaddlePaddle 开发者使用 Emacs。他们在自己的 `~/.emacs` 配置文件里加两行"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:122
msgid "就可以按 `Ctrl-C` 和 `c` 键来启动编译了。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:124
msgid "可以并行编译吗？"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:126
msgid ""
"是的。我们的 Docker image 运行一个 `Paddle编译Bash脚本 "
"<https://github.com/PaddlePaddle/Paddle/blob/develop/paddle/scripts/docker/build.sh>`_"
" 。这个脚本调用 `make -j$(nproc)` 来启动和 CPU 核一样多的进程来并行编译。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:128
msgid "Docker 需要 sudo"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:130
msgid ""
"如果用自己的电脑开发，自然也就有管理员权限（sudo）了。如果用公用的电脑开发，需要请管理员安装和配置好 "
"Docker。此外，PaddlePaddle 项目在努力开始支持其他不需要 sudo 的集装箱技术，比如 rkt。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:132
msgid "在 Windows/MacOS 上编译很慢"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:134
msgid ""
"Docker 在 Windows 和 MacOS 都可以运行。不过实际上是运行在一个 Linux 虚拟机上。可能需要注意给这个虚拟机多分配一些 "
"CPU 和内存，以保证编译高效。具体做法请参考 `如何为Windows/Mac计算机上的Docker增加内存和虚拟机 "
"<https://github.com/PaddlePaddle/Paddle/issues/627>`_ 。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:136
msgid "磁盘不够"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:138
msgid ""
"本文中的例子里，`docker run` 命令里都用了 `--rm` 参数，这样保证运行结束之后的 containers 不会保留在磁盘上。可以用"
" `docker ps -a` 命令看到停止后但是没有删除的 containers。`docker build` "
"命令有时候会产生一些中间结果，是没有名字的 images，也会占用磁盘。可以参考 `如何删除Docker Container "
"<https://zaiste.net/posts/removing_docker_containers/>`_ 来清理这些内容。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:144
msgid "附录：编译依赖"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:146
msgid "PaddlePaddle编译需要使用到下面的依赖（包含但不限于），其他的依赖软件，会自动在编译时下载。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:148
msgid "PaddlePaddle编译依赖"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "依赖"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "版本"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "说明"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "CMake"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid ">=3.2"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "GCC"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "4.8.2"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "推荐使用CentOS的devtools2"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "Python"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "2.7.x"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "依赖libpython2.7.so"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "pip"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid ">=9.0"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "numpy"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "SWIG"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid ">=2.0"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "Go"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid ">=1.8"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "可选"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:164
msgid "附录：编译选项"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:166
msgid ""
"PaddlePaddle的编译选项，包括生成CPU/GPU二进制文件、链接何种BLAS库等。 "
"用户可在调用cmake的时候设置它们，详细的cmake使用方法可以参考 `官方文档 <https://cmake.org/cmake-"
"tutorial>`_ 。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:170
msgid "在cmake的命令行中，通过使用 ``-D`` 命令设置该类编译选项，例如："
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:176
msgid "编译选项说明"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "选项"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "默认值"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "WITH_GPU"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "是否支持GPU"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "ON"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "WITH_C_API"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "是否仅编译CAPI"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "OFF"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "WITH_DOUBLE"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "是否使用双精度浮点数"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "WITH_DSO"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "是否运行时动态加载CUDA动态库，而非静态加载CUDA动态库。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "WITH_AVX"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "是否编译含有AVX指令集的PaddlePaddle二进制文件"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "WITH_PYTHON"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "是否内嵌PYTHON解释器"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "WITH_STYLE_CHECK"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "是否编译时进行代码风格检查"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "WITH_TESTING"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "是否开启单元测试"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "WITH_DOC"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "是否编译中英文文档"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "WITH_SWIG_PY"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "是否编译PYTHON的SWIG接口，该接口可用于预测和定制化训练"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "Auto"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "WITH_GOLANG"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "是否编译go语言的可容错parameter server"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "WITH_MKL"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:1
msgid "是否使用MKL数学库，如果为否则是用OpenBLAS"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:194
msgid "BLAS"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:196
msgid ""
"PaddlePaddle支持 `MKL <https://software.intel.com/en-us/intel-mkl>`_ 和 "
"`OpenBlAS <http://www.openblas.net/>`_ "
"两种BLAS库。默认使用MKL。如果使用MKL并且机器含有AVX2指令集， 还会下载MKL-DNN数学库，详细参考 `mkldnn设计文档 "
"<https://github.com/PaddlePaddle/Paddle/tree/develop/doc/design/mkldnn#cmake>`_"
" 。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:200
msgid "如果关闭MKL，则会使用OpenBLAS作为BLAS库。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:203
msgid "CUDA/cuDNN"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:205
msgid ""
"PaddlePaddle在编译时/运行时会自动找到系统中安装的CUDA和cuDNN库进行编译和执行。 使用参数 "
":code:`-DCUDA_ARCH_NAME=Auto` 可以指定开启自动检测SM架构，加速编译。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:208
msgid ""
"PaddlePaddle可以使用cuDNN v5.1之后的任何一个版本来编译运行，但尽量请保持编译和运行使用的cuDNN是同一个版本。 "
"我们推荐使用最新版本的cuDNN。"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:212
msgid "编译选项的设置"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:214
msgid ""
"PaddePaddle通过编译时指定路径来实现引用各种BLAS/CUDA/cuDNN库。cmake编译时，首先在系统路径（ "
":code:`/usr/lib:/usr/local/lib` ）中搜索这几个库，同时也会读取相关路径变量来进行搜索。 通过使用 ``-D`` "
"命令可以设置，例如"
msgstr ""

#: ../../source/quick_start/install/build_from_source_cn.rst:220
msgid ""
"**注意：这几个编译选项的设置，只在第一次cmake的时候有效。如果之后想要重新设置，推荐清理整个编译目录（** :code:`rm -rf` "
"）**后，再指定。**"
msgstr ""

